
const data = {
  "keys": {
      "n": 4,
      "k": 3
  },
  "1": {
      "base": "10",
      "value": "4"
  },
  "2": {
      "base": "2",
      "value": "111"
  },
  "3": {
      "base": "10",
      "value": "12"
  },
  "6": {
      "base": "4",
      "value": "213"
  }
};
// const data={
//         "keys": {
//             "n": 9,
//             "k": 6
//         },
//         "1": {
//             "base": "10",
//             "value": "28735619723837"
//         },
//         "2": {
//             "base": "16",
//             "value": "1A228867F0CA"
//         },
//         "3": {
//             "base": "12",
//             "value": "32811A4AA0B7B"
//         },
//         "4": {
//             "base": "11",
//             "value": "917978721331A"
//         },
//         "5": {
//             "base": "16",
//             "value": "1A22886782E1"
//         },
//         "6": {
//             "base": "10",
//             "value": "28735619654702"
//         },
//         "7": {
//             "base": "14",
//             "value": "71AB5070CC4B"
//         },
//         "8": {
//             "base": "9",
//             "value": "122662581541670"
//         },
//         "9": {
//             "base": "8",
//             "value": "642121030037605"
//         }
//     }

function convertToDecimal(value, base) {
    if (base < 2 || base > 36) {
        throw new Error('Base must be between 2 and 36');
    }

    return parseInt(value, base);
}


function parseJsonInput(input) {
    
    const roots = [];

    for (const key in input) {
        if (key === 'keys') continue;

        const base = input[key].base;
        const yValue = input[key].value;
        const x = parseInt(key);
        const y = convertToDecimal(yValue, base);

        roots.push({ x, y });
    }                                                                                                                                                                         
    console.log(roots);
    return roots;
}




function lagrangeInterpolation(points) {
    let polynomial = '';

    for (let i = 0; i < points.length; i++) {
        let xi = points[i].x;
        let yi = points[i].y;

        let term = '';

        for (let j = 0; j < points.length; j++) {
            if (i !== j) {
                let xj = points[j].x;
                term += `(x - ${xj})`;
                term += ` / (${xi} - ${xj})`;
                term += ' * ';
            }
        }
        term = term.slice(0, -3); // Remove trailing ' * '
        term = `(${yi}) * ${term}`;

        polynomial += term + ' + ';
    }

    polynomial = polynomial.slice(0, -3); // Remove trailing ' + '

    // Simplify polynomial
    return polynomial;
}


function evaluatePolynomial(polynomial, x) {
    // Replace 'x' in the polynomial string with the actual value
    const expression = polynomial.replace(/x/g, `(${x})`);
    // Evaluate the polynomial expression
    return eval(expression);
}


const roots=parseJsonInput(data);
const polynomial = lagrangeInterpolation(roots);
console.log(`The polynomial is: ${polynomial}`);
const result = evaluatePolynomial(polynomial, 0);
console.log(`The value of the polynomial at x = 0 is: ${result}`);


